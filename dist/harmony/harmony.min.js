!function(e){function r(e){return"string"==typeof e?Promise.reject({status:"failure",message:e,result:null}):"object"==typeof e?Promise.reject({status:"failure",message:e?.message??null,result:e?.result??null}):Promise.reject({status:"failure",message:null,result:null})}function n(e){return"object"==typeof e&&"success"===e?.status?Promise.resolve({status:"success",message:e.message??null,result:e.result??null}):r(e)}!function(e){e.program.relaunch=async function(t){try{return Promise.resolve(e.handler("CallRelaunch",t)).then(n).catch(r)}catch(e){return r(e)}},e.program.redirectTo=async function(t){try{return Promise.resolve(e.handler("CallRedirectTo",t)).then(n).catch(r)}catch(e){return r(e)}},e.program.navigateTo=async function(t){try{return Promise.resolve(e.handler("CallNavigateTo",t)).then(n).catch(r)}catch(e){return r(e)}},e.program.navigateBack=async function(t){try{return Promise.resolve(e.handler("CallNavigateBack",t)).then(n).catch(r)}catch(e){return r(e)}},e.program.scanQRCode=async function(t){try{return Promise.resolve(e.handler("CallScanQRCode",t)).then(n).catch(r)}catch(e){return r(e)}}}(e),function(e){if(e.handler=window.harmony_webview.caller.bind(window.harmony_webview),e.runner=window.injectHarmonyBridgeRunner,e.ready=!0,"function"==typeof e.runner){var r=e.env,n=e.name;e.runner({env:r,name:n,source:e})}}(e),function(e){delete window.injectHarmonyBridgeRunner,delete window.harmony_webview,Object.freeze(e.program),Object.freeze(e.handler),Object.freeze(e.runner),Object.freeze(e)}(e)}(window.injectHarmonyBridgeSourcer={env:"harmony",name:"harmony_webview_bridge",program:Object.create(null),handler:void 0,runner:void 0,ready:!1});